# ALAI

Experiments around acoustic data transmission built on top of
[ggwave](https://github.com/ggerganov/ggwave).

## Backend

The FastAPI backend wraps the ggwave CLI utilities built from the upstream
sources. Binaries are produced under `build/bin/` (with fallbacks to
`build/_deps/ggwave-build/bin/`) when you run the root CMake build.

### Setup

```bash
make build-ggwave
python -m venv .venv && source .venv/bin/activate
pip install -r requirements.txt
make serve
```

The API runs at http://127.0.0.1:8000. Interactive documentation is available
at http://127.0.0.1:8000/docs.

Set `ALLOWED_ORIGINS` (comma-separated) if the frontend is served from a
different origin and requires CORS access. Override `GGWAVE_ENCODE` or
`GGWAVE_DECODE` to point at custom encoder/decoder binaries if needed.

## Frontend

The `frontend/` directory contains a lightweight Vite + React app for testing
the encode/decode endpoints in a browser.

```bash
cd frontend
npm install
npm run dev
```

By default the UI calls `http://127.0.0.1:8000`. Point it at another backend by
setting `VITE_API_BASE_URL` when starting the dev server, for example:

```bash
VITE_API_BASE_URL="http://localhost:8000" npm run dev
```

When both backend and frontend are running you can open the Vite dev server URL
shown in the terminal (typically http://127.0.0.1:5173) and exercise the full
POC workflow: enter text to generate audio, then upload a WAV to decode it.

### Examples

Encode text into a WAV file:

```bash
curl -s -X POST \
  -H "Content-Type: application/json" \
  -d '{"text": "Hello"}' \
  http://127.0.0.1:8000/encode --output payload.wav
```

Decode the payload back into text:

```bash
curl -s -F "file=@payload.wav" http://127.0.0.1:8000/decode
```
