"""FastAPI application exposing ggwave CLI helpers over HTTP."""

from __future__ import annotations


import os
import re
import subprocess
import tempfile
from pathlib import Path


def _run_cli(command: Iterable[str], *, input_data: bytes | None = None) -> subprocess.CompletedProcess[bytes]:
    try:
        return subprocess.run(
            list(command),
            input=input_data,
            check=True,
            capture_output=True,
        )
    except FileNotFoundError as exc:  # pragma: no cover - file missing is handled as runtime error
        raise HTTPException(status_code=500, detail=f"Executable not found: {command!r}") from exc
    except subprocess.CalledProcessError as exc:
        stderr = (exc.stderr or b"").decode("utf-8", errors="ignore").strip()
        detail = stderr or f"Command '{' '.join(map(str, command))}' failed with exit code {exc.returncode}"
        raise HTTPException(status_code=500, detail=detail) from exc


def _remove_file(path: Path) -> None:
    try:
        path.unlink()
    except FileNotFoundError:
        pass





@app.post(
    "/encode",
    response_class=StreamingResponse,
    summary="Encode text into an ultrasonic WAV payload",
)


@app.post(
    "/decode",
    response_class=PlainTextResponse,
    summary="Decode an ultrasonic WAV payload into text",
)
async def decode(file: UploadFile = File(..., description="WAV file generated by ggwave.")) -> PlainTextResponse:
    contents = await file.read()
    if not contents:
        raise HTTPException(status_code=400, detail="Uploaded WAV file was empty.")



    with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmp_file:
        tmp_file.write(contents)
        tmp_path = Path(tmp_file.name)

    try:
        result = _run_cli([str(decoder_path), str(tmp_path)])
    finally:
        _remove_file(tmp_path)

    decoded_output = result.stdout.decode("utf-8", errors="ignore")
    match = DECODE_PATTERN.search(decoded_output)
    if not match:
        raise HTTPException(
            status_code=400,
            detail="Could not decode a message from the provided audio.",
        )

    message = match.group(1)
    return PlainTextResponse(content=message)
